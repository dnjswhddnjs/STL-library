#include <iostream>
#include <deque>
#include <string>
using namespace std;

//vector는 새로운 원소가 추가 될때 메모리 재할당 후 이전 원소를 
// 복사하는 방식으로 인하여,  삽입시에 성능이 저하 하는 단점이 있습니다.
//deque는 이러한 vector의 단점을 보완하기 위해서 여러개의 메모리 
// 블록을 할당하고하나의 블록처럼 여기는 기능을 제공합니다.
//deque는 메모리가 부족할때 마다 일정한 크기의 새로운 메모리 블록을 할당합니다.
//그럼으로써, 이전 원소를 복사하지 않습니다.

//vector와 다른 부분 : capacity()가 없다.
int main(void)
{
    deque<int> dq(10, 1);
    deque<int> dq_arr[4];
    
    dq_arr[0].assign(10, 2);
    for (int i = 0;i < 10;i++)
        dq_arr[1].push_back(3);

    dq_arr[2].resize(10);
    for (int i = 0;i < 10;i++)
        dq_arr[2].at(i) = 4;

 

    for (auto& iter : dq) cout << iter << ' ';
    cout << endl;
    for (deque<int>::size_type i = 0;i < dq_arr[0].size();i++) cout << dq_arr[0][i] << ' ';
    cout << endl;

    for (int i = 0;i < 10;i++)
        cout<<dq_arr[1].at(i)<<' ';
    cout << endl;


    deque<int>::iterator itr;
    for (itr = dq_arr[2].begin(); itr != dq_arr[2].end();itr++) cout << *itr << ' ';
    cout << endl;


    dq_arr[3].operator=(dq_arr[2]);
    dq_arr[3].push_front(5);
    dq_arr[3].erase(dq_arr[3].end()-1);
    dq_arr[3].insert(dq_arr[3].begin() + 2, 3, 7);
    deque<int>::iterator ritr;

    for (auto riter= dq_arr[3].rbegin(); riter != dq_arr[3].rend();riter++) 
        cout << *riter << ' ';



}
