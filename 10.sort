#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

//출처: https://blockdmask.tistory.com/100?category=249379 [개발자 지망생]

//sort
//introsort라는 하이브리드 알고리즘(quicksort + heapsort)을 이용한다.
//기본적으로 퀵 정렬을 하지만 재귀 깊이가 깊어지는 경우 힙 정렬을 사용한다. 
//파티션이 작을 때 (n^2중에는 가장 빠른)삽입 정렬로 전환하는 추가적인 최적화를 해주는 경우도 있다.
//sort(start,end)  =>  [start,end) 범위 내에 값들을 정렬한다.

class student {
public:
	int grade;
	string name;
	student(int g, const char n[])
		:grade(g)
	{
		name = n;
	}
	bool operator<(student& ref) {
		if (grade != ref.grade) return grade <ref.grade;
		else return name < ref.name;
	}
};

void PRINT(int arr[]) {
	for (int i = 0;i < 10;i++) {
		cout << arr[i] <<' ';
	}
	cout << endl;
	if (is_sorted(arr, arr + 10)) cout << "SORTED" << endl;
	else cout << "NOT SORTED" << endl;
	cout << endl;

}

void PRINT(vector<int> v) {
	for (auto iter:v) {
		cout << iter << ' ';
	}
	cout << endl;
	if (is_sorted(v.begin(), v.end())) cout << "SORTED" << endl;
	else cout << "NOT SORTED" << endl;
	cout << endl;
}

void PRINT(vector<student> v) {
	for (auto iter : v) {
		cout << iter.grade<<' '<<iter.name << endl;
	}
	cout << endl;

}


bool compare(student A,student B) {
	if (A.grade != B.grade) return A.grade < B.grade;
	else return A.name < B.name;
}

int main() {

	int arr[10] = { 1,10,2,9,3,8,4,7,5,6 };
	sort(arr, arr + 10);
	PRINT(arr);
	

	vector<int> v1;
	v1.push_back(5);
	v1.push_back(1);
	v1.push_back(2);
	v1.push_back(4);
	v1.push_back(3);

	sort(v1.begin(), v1.end());					//오름차순(default)
	PRINT(v1);

	sort(v1.begin(), v1.end(), greater<int>());	//내림차순
	PRINT(v1);
	
	vector<student> v2;
	v2.push_back(student(4, "aa"));
	v2.push_back(student(1, "cc"));
	v2.push_back(student(2, "ee"));
	v2.push_back(student(3, "dd"));
	v2.push_back(student(2, "bb"));


	sort(v2.begin(), v2.end(),compare);			//compare 함수를 정의하여 sort 기준을 만들기
	PRINT(v2);

	v2.push_back(student(1, "aa"));
	v2.push_back(student(4, "ff"));


	sort(v2.begin(), v2.end());					//연산자 오버로딩을 이용하여 sort 기준을 만들기
	PRINT(v2);


}
