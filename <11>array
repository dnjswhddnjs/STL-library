#include <iostream>
#include <array>
#include <algorithm>
using namespace std;

//출처: https://blockdmask.tistory.com/100?category=249379 [개발자 지망생]

//array
//템플릿 선언 : template < typename T, size_t N > class array;
//고정길이의 배열을 표현할때 사용 하는 C++11에 추가된 array container 입니다. (std::array)
//기존 배열과 마찬가지로 stack에 저장이 됩니다.
//이미 C++에 배열이 있음에도 불구하고 array컨테이너를 사용하는 이유는
//유용한 멤버함수를 활용하기 위해 사용합니다.

// vector와의 비교
//고정된 사이즈의 배열을 사용할 것이라면 C++ array container 를 사용하고,
//사이즈가 변하는 배열을 사용해야 한다면 C++ vector container를 사용하자.


template<typename T>
void PRINT(array<T,5> arr) {
	for (auto iter : arr)
		cout << iter << ' ';
	cout << endl << endl;

}

int main() {
	array<int, 5> arr1 = { 1,2,3,4,5 };	//생성과 동시에 초기화
	array<double, 5> arr2;				//생성과 동시에 쓰레기 값으로 초기화
	arr2 = { 5,4,3,2,1 };				//생성 이후에 초기화
	array<int, 5>arr3 = { 0, };			//생성과 동시에 0으로 초기화
	array<int, 5>arr4 = { 1, };			//생성과 동시에 맨처음 값은1, 나머지 값은 0으로 초기화

	//swap
	array<int, 5>().swap(arr4);

	array<int, 5>::const_iterator iter;	//반복자를 선언할때도 < typename T, size_t N >를 맞춰 주어야 한다.

	//cbegin,cend  <= begin과 end의 const버전
	for (iter = arr1.cbegin(); iter != arr1.cend();iter++)
		cout << *iter << ' ';
	cout << endl<<endl;

	cout << "arr1.front() : " << arr1.front() <<endl<< endl;
	cout << "arr1.back() : " << arr1.back() <<endl<< endl;


	//data => 배열의 포인터 타입을 반환한다. 즉 포인터연산을 이용하여 배열의 원소에 접근할 수 있다는 것.
	cout <<"*(arr1.data()+2) :"<< *(arr1.data()+2)<<endl << endl;

	//[]와 at
	cout << "arr1[2] : " << arr1[2] << endl << endl;
	cout << "arr1.at[2] : " << arr1.at(2) << endl << endl;

	//sort
	cout << "before sorted" << endl;
	PRINT(arr2);
	sort(arr2.begin(), arr2.end());
	cout << "after sort(arr2.begin(), arr2.end())" << endl;
	PRINT(arr2);


	arr2.fill(0.98);
	PRINT(arr2);

	//max_size와 size는 같다.
	cout << "arr2.max_size() : " << arr2.max_size() << "    <= 원소의 개수" << endl << endl;
	cout << "arr2.size() : " << arr2.size() << "    <= 원소의 개수" << endl << endl;
	cout << "sizeof(arr2) : " << sizeof(arr2)<<"    <= 바이트 단위" << endl << endl;
	cout << "arr2.empty() : " << arr2.empty() << endl << endl;

	array<int, 0>arr5;			//원소의 개수가 0개인 array도 선언은 가능
	cout << "arr5.size() : " << arr5.size() << "    <= 원소의 개수" << endl << endl;
	cout << "sizeof(arr5) : " << sizeof(arr5) << "    <= 바이트 단위" << endl << endl;
	//이때, 일단 int형 array를 선언하는 것 자체로 메모리를 잡아놓기 때문에 원소의 개수가 
	//0개 이더라도 최소사이즈인 4가 잡히게 된다.

}
